// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @unique @default(cuid())
  email             String         @unique
  username          String
  tag               String
  displayName       String?
  profileImageUrl   String?
  bannerImageUrl    String?
  avatarId          String?
  bio               String? 
  role              Role           @default(User)
  spaces            Space[]        // Renamed 'space' to 'spaces' for clarity (one user can create many spaces)
  isProfileComplete Boolean        @default(false)
  avatar            Avatar?        @relation(fields: [avatarId], references: [id])
  provider          AuthProvider   @default(EMAIL) 
  providerId        String?        @unique
  
  @@unique([username, tag])
  @@unique([provider, providerId])
}

model Otp {
  id        String   @id @default(cuid())
  email     String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Space {
  id          String        @id @unique @default(cuid())
  name        String
  width       Int           // Width is stored directly on Space, as provided by frontend from Map selection
  height      Int           // Changed from Int? to Int, as frontend provides this from Map selection
  // Removed: thumbnail String? - This property should be accessed via the 'map' relation
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  creatorId   String
  creator     User          @relation(fields: [creatorId], references: [id])

  mapId       String        // NEW: Foreign key to the Map model
  map         Map           @relation(fields: [mapId], references: [id]) // NEW: Relation to the Map model

  elements    SpaceElements[]
}

model SpaceElements {
  id        String @id @unique @default(cuid())
  elementId String
  spaceId   String
  x         Int
  y         Int
  space     Space   @relation(fields: [spaceId], references: [id])
  element   Element @relation(fields: [elementId], references: [id])
}

model Element {
  id          String @id @unique @default(cuid())
  width       Int
  height      Int
  imageUrl    String
  spaces      SpaceElements[]
  mapElements MapElements[]
}

model Map {
  id           String        @id @unique @default(cuid())
  width        Int
  height       Int
  name         String        @unique // Ensures map names are unique
  thumbnailUrl String?
  createdAt    DateTime      @default(now()) // Added for consistency
  updatedAt    DateTime      @updatedAt // Added for consistency

  mapElements  MapElements[]
  spaces       Space[]       // NEW: Back relation to Space model (a Map can be used by many Spaces)
}

model MapElements {
  id        String  @id @unique @default(cuid())
  mapId     String
  elementId String
  x         Int?
  y         Int?
  map       Map     @relation(fields: [mapId], references: [id])
  element   Element @relation(fields: [elementId], references: [id])
}

model Avatar {
  id       String  @id @unique @default(cuid())
  imageUrl String?
  name     String?
  users    User[]
}

enum Role {
  Admin
  User
} 

enum AuthProvider {
  EMAIL
  GOOGLE
  GITHUB
}
